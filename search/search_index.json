{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Pr\u00e9sentation \u2693\ufe0e bonjour 1. Introduction \u2693\ufe0e Charles POULMAIRE, enseignant de Math\u00e9matiques et de NSI dans l'acad\u00e9mie de Versailles. Pr\u00e9sident de l'AEIF. Gilles LASSUS, enseignant de Math\u00e9matiques et de NSI dans l'acad\u00e9mie de Bordeaux. Membres de l' Association des Enseignantes et enseignants d'Informatique de France . 2. Le partage, le partage, le partage \u2693\ufe0e D\u00e9clararation pr\u00e9alable La solution que nous allons pr\u00e9senter implique le d\u00e9p\u00f4t de nos ressources dans une forge ouverte . N'importe qui peut donc venir voir les documents, consulter les sources, et ainsi modifier et am\u00e9liorer le contenu. Il n'y a pas de section priv\u00e9e. Le contenu est souvent d\u00e9clar\u00e9 en licence Creative Commons. (CC BY-SA en ce qui nous concerne) 3. Un site, mais \u00e0 quel prix technique ? \u2693\ufe0e Partis pris techniques Nous ne souhaitons pas : \u00e9crire int\u00e9gralement un site en html / JavaScript : trop complexe ! utiliser de CMS (comme Wordpress) : pas assez de contr\u00f4le sur le contenu, et partage des sources difficile. Nous souhaitons : pouvoir nous concentrer uniquement sur le contenu p\u00e9dagogique. une courbe d'apprentissage rapide du langage. nous \u00e9crirons notre contenu en Markdown . Le logiciel MkDocs se chargera ensuite de construire le site qui affichera notre contenu. 4. Exemples de sites utilisant Mkdocs \u2693\ufe0e https://squidfunk.github.io/mkdocs-material/getting-started/ https://e-nsi.forge.aeif.fr/pratique/ https://ericecmorlaix.github.io/adn-Tutoriel_site_web/MarkDown-Mkdocs_Material/#fichier-md https://glassus.github.io/terminale_nsi/ 5. MkDocs ? \u2693\ufe0e MkDocs est un logiciel libre permettant de g\u00e9n\u00e9rer des sites de documentation d'autres logiciels. Nous allons utiliser un th\u00e8me particulier pour MkDocs, nomm\u00e9 Material for MkDocs , d\u00e9velopp\u00e9 et maintenu par Martin Donath . Le principe fondamental de cette technologie est de permettre \u00e0 l'utilisateur de r\u00e9diger uniquement ses pages en Markdown , sans avoir \u00e0 \u00e9crire de html . Le Markdown \u00e9tant un langage de description tr\u00e8s facile d'acc\u00e8s et d'utilisation, il est possible de se concentrer uniquement sur le fond, laissant \u00e0 MkDocs le soin de g\u00e9rer la forme. 6. Ouvrons le capot : quel code pour quel r\u00e9sultat ? \u2693\ufe0e 6.1 Exemple d'une portion de site \u2693\ufe0e 6.2 Le code en Markdown ayant g\u00e9n\u00e9r\u00e9 cette portion de site \u2693\ufe0e ### 3.2 pi\u00e8ge n\u00b02 : ne JAMAIS ENTRER dans la boucle !!! bug \"Exemple fondateur n\u00b03 :heart:\" Le programme suivant : ```python a = 0 while a > 10: print(\"ce texte non plus ne s'\u00e9crira jamais\") a = a + 1 print(\"fini\") ``` va \u00e9crire ```fini``` et s'arr\u00eater. !!! example \"Exercice 1\" === \"\u00c9nonc\u00e9\" Trouver le plus petit nombre entier $n$ tel que $2^n$ soit sup\u00e9rieur \u00e0 1 milliard. === \"Correction\" ```python n = 1 while 2**n < 10**9: n = n + 1 print(\"trop petit\") print(\"trouv\u00e9 : \",n) ``` 7. De multiples extensions et possibilit\u00e9s \u2693\ufe0e Le mot d'ordre de la solution MkDocs est la simplicit\u00e9 . Il est toutefois possible de rajouter de multiples fonctionnalit\u00e9s (qui rendront peut-\u00eatre le code de moins en moins simple). 7.1 Prise en charge du Latex. \u2693\ufe0e Aucun probl\u00e8me et aucune lourdeur dans la syntaxe, il suffit d'encadrer son code de $... comme en \\(\\LaTeX\\) ! 7.2 Console Python \u2693\ufe0e Une \u00e9diteur Python peut \u00eatre int\u00e9gr\u00e9 tr\u00e8s facilement : \u25b6\ufe0f \u2935\ufe0f \u2934\ufe0f Il n\u00e9cessite la pr\u00e9sence de fichiers particuliers (javascript, css) dans l'arborescence de votre site. Pour les enseignants d'informatique, il est aussi possible d'int\u00e9grer une console SQL pour r\u00e9aliser des requ\u00eates en direct. 7.3 Int\u00e9gration d'iframes \u2693\ufe0e \u00c0 l'int\u00e9rieur du Markdown, il est possible d'\u00e9crire du html et donc d'int\u00e9grer des iframes... mais le code n'est plus tr\u00e8s simple et on se retrouve \u00e0 faire ce qu'on a voulu \u00e9viter : du html !! Exemple d'int\u00e9gration Code utilis\u00e9 Rendu Regardez cette belle animation GeoGebra : <iframe src=\"https://www.geogebra.org/classic/ahavfqve?embed\" width=\"800\" height=\"600\" allowfullscreen style=\"border: 1px solid #e4e4e4;border-radius: 4px;\" frameborder=\"0\"></iframe> Regardez cette belle animation GeoGebra : 7.4 G\u00e9n\u00e9rer un pdf \u00e0 partir d'un fichier Markdown \u2693\ufe0e Il est courant de g\u00e9n\u00e9rer un pdf depuis un fichier Markdown, notamment avec pandoc . Mais il est possible transformer directement vos pages web g\u00e9n\u00e9r\u00e9es par MkDocs en un (joli) pdf gr\u00e2ce au plugin mkdocs-page-pdf cr\u00e9\u00e9 par Beno\u00eet Ropars.","title":"Pr\u00e9sentation"},{"location":"#presentation","text":"bonjour","title":"Pr\u00e9sentation"},{"location":"#1-introduction","text":"Charles POULMAIRE, enseignant de Math\u00e9matiques et de NSI dans l'acad\u00e9mie de Versailles. Pr\u00e9sident de l'AEIF. Gilles LASSUS, enseignant de Math\u00e9matiques et de NSI dans l'acad\u00e9mie de Bordeaux. Membres de l' Association des Enseignantes et enseignants d'Informatique de France .","title":"1. Introduction"},{"location":"#2-le-partage-le-partage-le-partage","text":"D\u00e9clararation pr\u00e9alable La solution que nous allons pr\u00e9senter implique le d\u00e9p\u00f4t de nos ressources dans une forge ouverte . N'importe qui peut donc venir voir les documents, consulter les sources, et ainsi modifier et am\u00e9liorer le contenu. Il n'y a pas de section priv\u00e9e. Le contenu est souvent d\u00e9clar\u00e9 en licence Creative Commons. (CC BY-SA en ce qui nous concerne)","title":"2. Le partage, le partage, le partage"},{"location":"#3-un-site-mais-a-quel-prix-technique","text":"Partis pris techniques Nous ne souhaitons pas : \u00e9crire int\u00e9gralement un site en html / JavaScript : trop complexe ! utiliser de CMS (comme Wordpress) : pas assez de contr\u00f4le sur le contenu, et partage des sources difficile. Nous souhaitons : pouvoir nous concentrer uniquement sur le contenu p\u00e9dagogique. une courbe d'apprentissage rapide du langage. nous \u00e9crirons notre contenu en Markdown . Le logiciel MkDocs se chargera ensuite de construire le site qui affichera notre contenu.","title":"3. Un site, mais \u00e0 quel prix technique ?"},{"location":"#4-exemples-de-sites-utilisant-mkdocs","text":"https://squidfunk.github.io/mkdocs-material/getting-started/ https://e-nsi.forge.aeif.fr/pratique/ https://ericecmorlaix.github.io/adn-Tutoriel_site_web/MarkDown-Mkdocs_Material/#fichier-md https://glassus.github.io/terminale_nsi/","title":"4. Exemples de sites utilisant Mkdocs"},{"location":"#5-mkdocs","text":"MkDocs est un logiciel libre permettant de g\u00e9n\u00e9rer des sites de documentation d'autres logiciels. Nous allons utiliser un th\u00e8me particulier pour MkDocs, nomm\u00e9 Material for MkDocs , d\u00e9velopp\u00e9 et maintenu par Martin Donath . Le principe fondamental de cette technologie est de permettre \u00e0 l'utilisateur de r\u00e9diger uniquement ses pages en Markdown , sans avoir \u00e0 \u00e9crire de html . Le Markdown \u00e9tant un langage de description tr\u00e8s facile d'acc\u00e8s et d'utilisation, il est possible de se concentrer uniquement sur le fond, laissant \u00e0 MkDocs le soin de g\u00e9rer la forme.","title":"5. MkDocs ?"},{"location":"#6-ouvrons-le-capot-quel-code-pour-quel-resultat","text":"","title":"6. Ouvrons le capot : quel code pour quel r\u00e9sultat ?"},{"location":"#61-exemple-dune-portion-de-site","text":"","title":"6.1 Exemple d'une portion de site"},{"location":"#62-le-code-en-markdown-ayant-genere-cette-portion-de-site","text":"### 3.2 pi\u00e8ge n\u00b02 : ne JAMAIS ENTRER dans la boucle !!! bug \"Exemple fondateur n\u00b03 :heart:\" Le programme suivant : ```python a = 0 while a > 10: print(\"ce texte non plus ne s'\u00e9crira jamais\") a = a + 1 print(\"fini\") ``` va \u00e9crire ```fini``` et s'arr\u00eater. !!! example \"Exercice 1\" === \"\u00c9nonc\u00e9\" Trouver le plus petit nombre entier $n$ tel que $2^n$ soit sup\u00e9rieur \u00e0 1 milliard. === \"Correction\" ```python n = 1 while 2**n < 10**9: n = n + 1 print(\"trop petit\") print(\"trouv\u00e9 : \",n) ```","title":"6.2 Le code en Markdown ayant g\u00e9n\u00e9r\u00e9 cette portion de site"},{"location":"#7-de-multiples-extensions-et-possibilites","text":"Le mot d'ordre de la solution MkDocs est la simplicit\u00e9 . Il est toutefois possible de rajouter de multiples fonctionnalit\u00e9s (qui rendront peut-\u00eatre le code de moins en moins simple).","title":"7. De multiples extensions et possibilit\u00e9s"},{"location":"#71-prise-en-charge-du-latex","text":"Aucun probl\u00e8me et aucune lourdeur dans la syntaxe, il suffit d'encadrer son code de $... comme en \\(\\LaTeX\\) !","title":"7.1 Prise en charge du Latex."},{"location":"#72-console-python","text":"Une \u00e9diteur Python peut \u00eatre int\u00e9gr\u00e9 tr\u00e8s facilement : \u25b6\ufe0f \u2935\ufe0f \u2934\ufe0f Il n\u00e9cessite la pr\u00e9sence de fichiers particuliers (javascript, css) dans l'arborescence de votre site. Pour les enseignants d'informatique, il est aussi possible d'int\u00e9grer une console SQL pour r\u00e9aliser des requ\u00eates en direct.","title":"7.2 Console Python"},{"location":"#73-integration-diframes","text":"\u00c0 l'int\u00e9rieur du Markdown, il est possible d'\u00e9crire du html et donc d'int\u00e9grer des iframes... mais le code n'est plus tr\u00e8s simple et on se retrouve \u00e0 faire ce qu'on a voulu \u00e9viter : du html !! Exemple d'int\u00e9gration Code utilis\u00e9 Rendu Regardez cette belle animation GeoGebra : <iframe src=\"https://www.geogebra.org/classic/ahavfqve?embed\" width=\"800\" height=\"600\" allowfullscreen style=\"border: 1px solid #e4e4e4;border-radius: 4px;\" frameborder=\"0\"></iframe> Regardez cette belle animation GeoGebra :","title":"7.3 Int\u00e9gration d'iframes"},{"location":"#74-generer-un-pdf-a-partir-dun-fichier-markdown","text":"Il est courant de g\u00e9n\u00e9rer un pdf depuis un fichier Markdown, notamment avec pandoc . Mais il est possible transformer directement vos pages web g\u00e9n\u00e9r\u00e9es par MkDocs en un (joli) pdf gr\u00e2ce au plugin mkdocs-page-pdf cr\u00e9\u00e9 par Beno\u00eet Ropars.","title":"7.4 G\u00e9n\u00e9rer un pdf \u00e0 partir d'un fichier Markdown"},{"location":"01_Tutoriel/tutoriel/","text":"Cr\u00e9er et h\u00e9berger son propre site \u2693\ufe0e 1. Pr\u00e9paration de l'installation \u2693\ufe0e 1.1. Les pr\u00e9-requis \u2693\ufe0e Pr\u00e9-requis logiciels et packages Python Les logiciels suivants sont n\u00e9cessaires : Git . VisualStudioCode (ou son \u00e9quivalent libre VSCodium ) Une version r\u00e9cente de Python doit \u00e9galement \u00eatre install\u00e9e. Les packages Python mkdocs-material , mkdocs-macros-plugin , mkdocs-awesome-pages-plugin , mkdocs-git-revision-date-localized-plugin doivent ensuite \u00eatre install\u00e9s, par exemple par les commandes : pip install mkdocs - material mkdocs - macros - plugin mkdocs - awesome - pages - plugin mkdocs - git - revision - date - localized - plugin utilisation de Git Le principe d'utilsation de Git est complexe : des fiches explicatives sont disponibles ici Toutefois, le logiciel VisualStudioCode int\u00e8gre nativement la prise en charge de Git, et en propose une interface simple et agr\u00e9able. 1.2. H\u00e9bergement des pages \u2693\ufe0e Dans nos exemples, les pages sont h\u00e9berg\u00e9es chez GitHub , chez qui la cr\u00e9ation d'un compte est donc n\u00e9cessaire. Toutefois, une alternative libre existe et propose un service \u00e9quivalent : GitLab . 2. Cr\u00e9ation d'un nouveau d\u00e9p\u00f4t \u2693\ufe0e fork Un fork est une copie personnelle d'un d\u00e9p\u00f4t existant. Cette copie est totalement ind\u00e9pendante du d\u00e9p\u00f4t initial. La m\u00e9thode pr\u00e9sent\u00e9e ci-dessous va consister \u00e0 forker un d\u00e9p\u00f4t d\u00e9j\u00e0 existant, contenant la structure minimale d'un site en MkDocs. Ce site minimal est visible \u00e0 l'adresse https://nsi-mauriac.github.io/mkdocs-modele/ . 2.1 Sur GitHub.com : fork du site mod\u00e8le \u2693\ufe0e Connectez-vous sur GitHub . Allez \u00e0 l'adresse https://github.com/NSI-Mauriac/mkdocs-modele et cliquer sur le bouton Fork en haut \u00e0 droite. Choisissez un nouveau nom pour votre d\u00e9p\u00f4t (votre repository ). 2.2 Sur votre ordinateur : clonage de votre d\u00e9p\u00f4t \u2693\ufe0e Sur la page d'accueil de votre d\u00e9p\u00f4t GitHub, cliquez sur le bouton vert Code et copiez l'adresse affich\u00e9e, qui doit ressembler \u00e0 https://github.com/<username>/<nomdud\u00e9pot>.git . Sur votre ordinateur, ouvrez un Terminal et tapez la commande git clone https://github.com/<username>/<nomdud\u00e9pot>.git (vous pouvez y coller votre adresse par Ctrl-Maj-V ). Cette commande va permettre de rapatrier sur votre disque dur votre d\u00e9p\u00f4t, pour l'instant uniquement pr\u00e9sent sur les serveurs de GitHub. 3. Visualisation du site en local \u2693\ufe0e Ouvrez dans VisualStudioCode le dossier de votre d\u00e9p\u00f4t. Dans Terminal, cliquez sur Nouveau terminal pour faire appara\u00eetre un nouveau terminal Dans ce terminal, placez vous dans le r\u00e9pertoire de votre d\u00e9p\u00f4t. Tapez la commande mkdocs serve . Un serveur se lance et votre page devient normalement visible dans votre navigateur \u00e0 l'adresse http://127.0.0.1:8000/ . 4. H\u00e9bergement du site sur les serveurs de GitHub : activation des GitHub Pages \u2693\ufe0e Toujours en local, dans un Terminal de VSC, tapez la commande mkdocs gh-deploy . Cette commande, qui ne sera r\u00e9alis\u00e9e qu'une seule fois, permet de g\u00e9n\u00e9rer toute l'architecture de votre site pour son d\u00e9ploiement sur les pages de GitHub . Elle sera faite automatiquement par la suite sur les serveurs de GitHub \u00e0 chaque modification de vos pages. Connectez-vous sur GitHub et allez sur la page d'accuil de votre d\u00e9p\u00f4t. Cliquez sur Settings , puis dans la colonne de gauche sur Pages . Dans la partie Build and deployment , choisir la branche gh-pages puis cliquer sur Save . Quelques instants plus tard, votre site est visible \u00e0 la page https://<username>.github.io/<nomdudepot> 5. Fonctionnement quotidien : routines de modification du site \u2693\ufe0e Ouvrir VSC, lancer mkdocs serve . Ouvrir la page 127.0.0.1:8000 dans son navigateur. Dans VSC, r\u00e9diger ses documents en Markdown, faire un Ctrl-S pour v\u00e9rifier en local les changements sur le site. Pour valider les changements et les rendre visibles sur GitHub , aller dans la partie Contr\u00f4le du code-source de VSC, sur le bandeau lat\u00e9ral gauche. Les fichiers modifi\u00e9s apparaissent. \u00c9crire quelques mots pour d\u00e9crire les changements puis cliquer sur Validation . On r\u00e9alise alors un commit . Cliquer ensuite sur Synchroniser les modifications . On r\u00e9alise alors un push . Sur les serveurs de GitHub, de mani\u00e8re automatique, notre site va se construire et se d\u00e9ployer. Suivant la taille du site, il peut se passer 1 ou 2 minutes avant que le site soit actualis\u00e9. Quelles commandes sont ex\u00e9cut\u00e9es sur le serveur distant ? Dans l'arborescence de notre d\u00e9p\u00f4t se trouve un dossier cach\u00e9 .github qui contient un fichier ci.yml (ci comme Continuous Integration ). On y retrouve les commandes ex\u00e9cut\u00e9es sur le serveur distant : name: ci on: push: branches: - master - main jobs: deploy: runs-on: ubuntu-latest steps: - uses: actions/checkout@v3 with: fetch-depth: 0 - uses: actions/setup-python@v2 with: python-version: 3.x - run: pip install mkdocs-material - run: pip install mkdocs-macros-plugin - run: pip install mkdocs-awesome-pages-plugin - run: pip install mkdocs-git-revision-date-localized-plugin - run: mkdocs gh-deploy --force On y retrouve l'installation des plugins n\u00e9cessaires, et la toute derni\u00e8re ligne mkdocs gh-deploy qui nous avait permis de construire (localement) notre site.","title":"Cr\u00e9er et h\u00e9berger son propre site"},{"location":"01_Tutoriel/tutoriel/#creer-et-heberger-son-propre-site","text":"","title":"Cr\u00e9er et h\u00e9berger son propre site"},{"location":"01_Tutoriel/tutoriel/#1-preparation-de-linstallation","text":"","title":"1. Pr\u00e9paration de l'installation"},{"location":"01_Tutoriel/tutoriel/#11-les-pre-requis","text":"Pr\u00e9-requis logiciels et packages Python Les logiciels suivants sont n\u00e9cessaires : Git . VisualStudioCode (ou son \u00e9quivalent libre VSCodium ) Une version r\u00e9cente de Python doit \u00e9galement \u00eatre install\u00e9e. Les packages Python mkdocs-material , mkdocs-macros-plugin , mkdocs-awesome-pages-plugin , mkdocs-git-revision-date-localized-plugin doivent ensuite \u00eatre install\u00e9s, par exemple par les commandes : pip install mkdocs - material mkdocs - macros - plugin mkdocs - awesome - pages - plugin mkdocs - git - revision - date - localized - plugin utilisation de Git Le principe d'utilsation de Git est complexe : des fiches explicatives sont disponibles ici Toutefois, le logiciel VisualStudioCode int\u00e8gre nativement la prise en charge de Git, et en propose une interface simple et agr\u00e9able.","title":"1.1. Les pr\u00e9-requis"},{"location":"01_Tutoriel/tutoriel/#12-hebergement-des-pages","text":"Dans nos exemples, les pages sont h\u00e9berg\u00e9es chez GitHub , chez qui la cr\u00e9ation d'un compte est donc n\u00e9cessaire. Toutefois, une alternative libre existe et propose un service \u00e9quivalent : GitLab .","title":"1.2. H\u00e9bergement des pages"},{"location":"01_Tutoriel/tutoriel/#2-creation-dun-nouveau-depot","text":"fork Un fork est une copie personnelle d'un d\u00e9p\u00f4t existant. Cette copie est totalement ind\u00e9pendante du d\u00e9p\u00f4t initial. La m\u00e9thode pr\u00e9sent\u00e9e ci-dessous va consister \u00e0 forker un d\u00e9p\u00f4t d\u00e9j\u00e0 existant, contenant la structure minimale d'un site en MkDocs. Ce site minimal est visible \u00e0 l'adresse https://nsi-mauriac.github.io/mkdocs-modele/ .","title":"2. Cr\u00e9ation d'un nouveau d\u00e9p\u00f4t"},{"location":"01_Tutoriel/tutoriel/#21-sur-githubcom-fork-du-site-modele","text":"Connectez-vous sur GitHub . Allez \u00e0 l'adresse https://github.com/NSI-Mauriac/mkdocs-modele et cliquer sur le bouton Fork en haut \u00e0 droite. Choisissez un nouveau nom pour votre d\u00e9p\u00f4t (votre repository ).","title":"2.1 Sur GitHub.com : fork du site mod\u00e8le"},{"location":"01_Tutoriel/tutoriel/#22-sur-votre-ordinateur-clonage-de-votre-depot","text":"Sur la page d'accueil de votre d\u00e9p\u00f4t GitHub, cliquez sur le bouton vert Code et copiez l'adresse affich\u00e9e, qui doit ressembler \u00e0 https://github.com/<username>/<nomdud\u00e9pot>.git . Sur votre ordinateur, ouvrez un Terminal et tapez la commande git clone https://github.com/<username>/<nomdud\u00e9pot>.git (vous pouvez y coller votre adresse par Ctrl-Maj-V ). Cette commande va permettre de rapatrier sur votre disque dur votre d\u00e9p\u00f4t, pour l'instant uniquement pr\u00e9sent sur les serveurs de GitHub.","title":"2.2 Sur votre ordinateur : clonage de votre d\u00e9p\u00f4t"},{"location":"01_Tutoriel/tutoriel/#3-visualisation-du-site-en-local","text":"Ouvrez dans VisualStudioCode le dossier de votre d\u00e9p\u00f4t. Dans Terminal, cliquez sur Nouveau terminal pour faire appara\u00eetre un nouveau terminal Dans ce terminal, placez vous dans le r\u00e9pertoire de votre d\u00e9p\u00f4t. Tapez la commande mkdocs serve . Un serveur se lance et votre page devient normalement visible dans votre navigateur \u00e0 l'adresse http://127.0.0.1:8000/ .","title":"3. Visualisation du site en local"},{"location":"01_Tutoriel/tutoriel/#4-hebergement-du-site-sur-les-serveurs-de-github-activation-des-github-pages","text":"Toujours en local, dans un Terminal de VSC, tapez la commande mkdocs gh-deploy . Cette commande, qui ne sera r\u00e9alis\u00e9e qu'une seule fois, permet de g\u00e9n\u00e9rer toute l'architecture de votre site pour son d\u00e9ploiement sur les pages de GitHub . Elle sera faite automatiquement par la suite sur les serveurs de GitHub \u00e0 chaque modification de vos pages. Connectez-vous sur GitHub et allez sur la page d'accuil de votre d\u00e9p\u00f4t. Cliquez sur Settings , puis dans la colonne de gauche sur Pages . Dans la partie Build and deployment , choisir la branche gh-pages puis cliquer sur Save . Quelques instants plus tard, votre site est visible \u00e0 la page https://<username>.github.io/<nomdudepot>","title":"4. H\u00e9bergement du site sur les serveurs de GitHub: activation des GitHub Pages"},{"location":"01_Tutoriel/tutoriel/#5-fonctionnement-quotidien-routines-de-modification-du-site","text":"Ouvrir VSC, lancer mkdocs serve . Ouvrir la page 127.0.0.1:8000 dans son navigateur. Dans VSC, r\u00e9diger ses documents en Markdown, faire un Ctrl-S pour v\u00e9rifier en local les changements sur le site. Pour valider les changements et les rendre visibles sur GitHub , aller dans la partie Contr\u00f4le du code-source de VSC, sur le bandeau lat\u00e9ral gauche. Les fichiers modifi\u00e9s apparaissent. \u00c9crire quelques mots pour d\u00e9crire les changements puis cliquer sur Validation . On r\u00e9alise alors un commit . Cliquer ensuite sur Synchroniser les modifications . On r\u00e9alise alors un push . Sur les serveurs de GitHub, de mani\u00e8re automatique, notre site va se construire et se d\u00e9ployer. Suivant la taille du site, il peut se passer 1 ou 2 minutes avant que le site soit actualis\u00e9. Quelles commandes sont ex\u00e9cut\u00e9es sur le serveur distant ? Dans l'arborescence de notre d\u00e9p\u00f4t se trouve un dossier cach\u00e9 .github qui contient un fichier ci.yml (ci comme Continuous Integration ). On y retrouve les commandes ex\u00e9cut\u00e9es sur le serveur distant : name: ci on: push: branches: - master - main jobs: deploy: runs-on: ubuntu-latest steps: - uses: actions/checkout@v3 with: fetch-depth: 0 - uses: actions/setup-python@v2 with: python-version: 3.x - run: pip install mkdocs-material - run: pip install mkdocs-macros-plugin - run: pip install mkdocs-awesome-pages-plugin - run: pip install mkdocs-git-revision-date-localized-plugin - run: mkdocs gh-deploy --force On y retrouve l'installation des plugins n\u00e9cessaires, et la toute derni\u00e8re ligne mkdocs gh-deploy qui nous avait permis de construire (localement) notre site.","title":"5. Fonctionnement quotidien : routines de modification du site"},{"location":"02_Git/git1/","text":"Documentation git Git Cheat Sheets Git Cheat Sheets en fran\u00e7ais Git Cheat Sheets en pdf Visual Git Cheat Sheet A. Git premiers pas 1. Installation de Git 2. Premier pas 3. Page web 4. Modification de la page web et des commit 5. Un historique des commit B. Git Branches 1. Les branches 2. Cr\u00e9ation d'une branche 3. Travailler sur une branche 4. Retour sur la branche master C. Git partie Push and Pull 1. Utilisation de GitHub 2. Travail avec un collaborateur A. Git premiers pas \u2693\ufe0e 1. Installation de Git \u2693\ufe0e Installer Git (installation de raccourci Git Bash) V\u00e9rifier dans un terminal avec git version 1 $ git version git version 2.31.1.windows.1 Le num\u00e9ro de la version s'affiche sinon Configurer Git avec git config 2 D\u00e9finit le nom que vous voulez associer \u00e0 toutes vos op\u00e9rations de commit $ git config --global user.name \"charles\" D\u00e9finit l\u2019email que vous voulez associer \u00e0 toutes vos op\u00e9rations de commit $ git config --global user.email charles.poulmaire@ac-versailles.fr Voir la configuration avec git config --list 3 $ git config --list ... ... user.name=Charles user.email=charles.poulmaire@ac-versailles.fr ... ... 2. Premier pas \u2693\ufe0e Cr\u00e9er un dossier pour votre site $ mkdir siteWeb $ cd siteWeb D\u00e9marrer un nouveau d\u00e9p\u00f4t avec git init 4 $ git init Cr\u00e9ation dans le dossier d'un dossier .git (bien rempli) $ git status On branch master No commits yet nothing to commit (create/copy files and use \"git add\" to track) Une branch est une ligne de temps sur laquelle nous allons travailler. Un commit est une photo \u00e0 l'instant t de notre travail. On peut travailler puis refaire un commit pour avoir une photo. Tout en conservant l'ancien commit . On peut aussi avoir plusieurs branch pour tester une solution ou travailler \u00e0 plusieurs puis fusionner avec la branch master . 3. Page web \u2693\ufe0e Cr\u00e9ation d'un page web index.html <!DOCTYPE html> < html > < head > < meta charset = \"utf-8\" /> < title > Tutoriel Git </ title > </ head > < body > < h1 > Hello world </ h1 > </ body > </ html > On affiche le status $ git status On branch master No commits yet Untracked files: (use \"git add <file>...\" to include in what will be committed) index.html Cela nous indique q'un fichier n'est pas suivi. On n'a pas encore indiqu\u00e9 qu'il fallait suivre ce fichier. $ git add . Le point . permet de tout ajouter pour le suivi. $ git commit -m \"Initial commit\" [master (root-commit) 26ee28b] Initial commit 1 file changed, 11 insertions(+) create mode 100644 index.html Le suivi est effectu\u00e9 $ git status On branch master nothing to commit, working tree clean Tout se passe bien. 4. Modification de la page web et des commit \u2693\ufe0e Ajout d'un paragraphe < p > Tutoriel sur Git </ p > $ git status On branch master Changes not staged for commit: (use \"git add <file>...\" to update what will be committed) (use \"git restore <file>...\" to discard changes in working directory) modified: index.html Git nous indique qu'il y a eu des changements sur le fichier suivi. Alors ... $ git add . $ git commit -m \"Ajout d'un paragraphe\" [master 7c7b826] Ajout d'un paragraphe 1 file changed, 1 insertion(+), 1 deletion(-) une nouvelle photo de notre travail 5. Un historique des commit \u2693\ufe0e $ git log commit 7c7b826effd3a7989fcba8e339dc6e5e4384d3d0 (HEAD -> master) Author: Charles Yo <charles.endymion@gmail.com> Date: Tue Sep 13 11:41:01 2022 +0200 Ajout d'un paragraphe commit 26ee28ba8a62f8bd59e620dc34bfdbfc90bbb434 Author: Charles Yo <charles.endymion@gmail.com> Date: Tue Sep 13 11:00:18 2022 +0200 Initial commit Cette commande git log permet de voir tous les commit . - Auteur; - date; - message. B. Git Branches \u2693\ufe0e 1. Les branches \u2693\ufe0e $ git status On branch master nothing to commit, working tree clean ou $ git branch * master Cela nous indique que nous sommes sur la branch master . Le sch\u00e9ma ci-dessous montre en bleu les diff\u00e9rents commit . On souhaite parfois faire des modifications, d\u00e9velopper d'autres fonctionalit\u00e9s. Pour cela on cr\u00e9e une branche en orange puis on fusionne avec la branche master si on le souhaite. 2. Cr\u00e9ation d'une branche \u2693\ufe0e Cr\u00e9ation d'une branche nommer Hello avec git branch 5 $ git branch Hello $ git branch Hello * master On a donc deux branches : Hello et master. Je suis actuellement sur la branche master indiqu\u00e9 par *. Autre solution $ git checkout -b Bye Switched to a new branch 'Bye' $ git branch * Bye Hello master Nous avons cr\u00e9\u00e9 une nouvelle branche et nous sommes actuellement sur la branche Bye indiqu\u00e9 par *. Aller sur une autre branche $ git checkout master Switched to branch 'master' $ git branch Bye Hello * master 3. Travailler sur une branche \u2693\ufe0e On va travailler sur la branche Hello $ git checkout Hello On effectue quelques modifications sur notre fichier index.html. <!DOCTYPE html> < html > < head > < meta charset = \"utf-8\" /> < title > Tutoriel Git </ title > < style > body { background-color : skyblue ;} h1 , p { color : #ffffff ;} </ style > </ head > < body > < h1 > Hello world </ h1 > < p > Tutoriel sur Git </ p > < p > Ceci est une modifiation ! </ p > </ body > </ html > On obtient : Un suivi et une photo de notre travail $ git add . $ git commit -m \"Ajout de couleur et texte\" [Hello 7d35a64] Ajout de couleur et texte 1 file changed, 5 insertions(+)) une nouvelle photo de notre travail mais dans la branche Hello Sur n'importe quelle branche Hello ou master notre travail est suivi. 4. Retour sur la branche master \u2693\ufe0e $ git checkout master Switched to branch 'master' J'actualise mon site. Les modifications ont disparues. Bascule sur la branche sp\u00e9cifi\u00e9e et met \u00e0 jour le r\u00e9pertoire de travail avec git merge 6 Il faut donc tirer nos modifications de la branche Hello vers la branche master $ git merge Hello Updating 7c7b826..7d35a64 Fast-forward index.html | 5 +++++ 1 file changed, 5 insertions(+) On retourne sur le site et Sur la branche master et Hello on a le m\u00eame code. C. Git partie Push and Pull \u2693\ufe0e Pour l'instant on travaille en local. Sans avoir besoin d'internet. Mais on souhaite travaille avec des collaborateurs dans un m\u00eame projet. Il faut que le code soit en ligne dans un repository (d\u00e9pot) en ligne. Listing des clients Git - Github (Github desktop pas de console) - GitLab - Bitbucket 1. Utilisation de GitHub \u2693\ufe0e Cr\u00e9ation d'un compte Cr\u00e9ation d'un projet Puis Soit on cr\u00e9e un nouveau repository \u2026or create a new repository on the command line echo \"# tuto-git\" >> README.md git init git add README.md git commit -m \"first commit\" git branch -M main git remote add origin https://github.com/Charles-depot/tuto-git.git git push -u origin main Soit on pousse un dossier qui existe d\u00e9j\u00e0 en local \u2026or push an existing repository from the command line git remote add origin https://github.com/Charles-depot/tuto-git.git git branch -M main git push -u origin main On va utiliser la deuxi\u00e8me solution car on a notre fichier index.html cr\u00e9\u00e9 Dans un terminal et dans le bon dossier. On va initialiser ce repository $ git remote add origin https://github.com/Charles-depot/tuto-git.git On va pousser notre code dans le repository. Attention la branche c'est master !!! git push -u origin master Enumerating objects: 9, done. Counting objects: 100% (9/9), done. Delta compression using up to 4 threads Compressing objects: 100% (6/6), done. Writing objects: 100% (9/9), 926 bytes | 13.00 KiB/s, done. Total 9 (delta 2), reused 0 (delta 0), pack-reused 0 remote: Resolving deltas: 100% (2/2), done. To https://github.com/Charles-depot/tuto-git.git * [new branch] master -> master Branch 'master' set up to track remote branch 'master' from 'origin'. Le code est maintenant accessible en ligne en actualisant la page. On peut le regarder en ligne et il est accessible \u00e0 tout le monde. Il existe de nombreux repository sur GitHub que l'on peut cloner en local. Petite modification en locale du fichier index.html par p> Ceci est une modifiation et un autre ! </ p > Dans le terminal $ git status On branch master Your branch is up to date with 'origin/master'. Changes not staged for commit: (use \"git add <file>...\" to update what will be committed) (use \"git restore <file>...\" to discard changes in working directory) modified: index.html no changes added to commit (use \"git add\" and/or \"git commit -a\") $ git add . $ git commit -m \"Modification du paragraphe\" [master 723d493] Modification du paragraphe 1 file changed, 1 insertion(+), 1 deletion(-) git $ git push origin master Enumerating objects: 5, done. Counting objects: 100% (5/5), done. Delta compression using up to 4 threads Compressing objects: 100% (2/2), done. Writing objects: 100% (3/3), 311 bytes | 44.00 KiB/s, done. Total 3 (delta 1), reused 0 (delta 0), pack-reused 0 remote: Resolving deltas: 100% (1/1), completed with 1 local object. To https://github.com/Charles-depot/tuto-git.git 7d35a64..723d493 master -> master Et sur le repository en actualisant. 2. Travail avec un collaborateur \u2693\ufe0e Pour la mise \u00e0 jour d'un dossier sur lequel il y a eu des changements. $ git pull origin master Compl\u00e9ment d'information Pas trouv\u00e9. \u21a9 Compl\u00e9ment d'information https://git-scm.com/docs/git-config \u21a9 Compl\u00e9ment d'information Pas trouv\u00e9. \u21a9 Compl\u00e9ment d'information https://git-scm.com/docs/git-init \u21a9 Compl\u00e9ment d'information https://git-scm.com/docs/git-branch \u21a9 Compl\u00e9ment d'information https://git-scm.com/docs/git-merge \u21a9","title":"Git premiers pas"},{"location":"02_Git/git1/#a-git-premiers-pas","text":"","title":"A. Git premiers pas"},{"location":"02_Git/git1/#1-installation-de-git","text":"Installer Git (installation de raccourci Git Bash) V\u00e9rifier dans un terminal avec git version 1 $ git version git version 2.31.1.windows.1 Le num\u00e9ro de la version s'affiche sinon Configurer Git avec git config 2 D\u00e9finit le nom que vous voulez associer \u00e0 toutes vos op\u00e9rations de commit $ git config --global user.name \"charles\" D\u00e9finit l\u2019email que vous voulez associer \u00e0 toutes vos op\u00e9rations de commit $ git config --global user.email charles.poulmaire@ac-versailles.fr Voir la configuration avec git config --list 3 $ git config --list ... ... user.name=Charles user.email=charles.poulmaire@ac-versailles.fr ... ...","title":"1. Installation de Git"},{"location":"02_Git/git1/#2-premier-pas","text":"Cr\u00e9er un dossier pour votre site $ mkdir siteWeb $ cd siteWeb D\u00e9marrer un nouveau d\u00e9p\u00f4t avec git init 4 $ git init Cr\u00e9ation dans le dossier d'un dossier .git (bien rempli) $ git status On branch master No commits yet nothing to commit (create/copy files and use \"git add\" to track) Une branch est une ligne de temps sur laquelle nous allons travailler. Un commit est une photo \u00e0 l'instant t de notre travail. On peut travailler puis refaire un commit pour avoir une photo. Tout en conservant l'ancien commit . On peut aussi avoir plusieurs branch pour tester une solution ou travailler \u00e0 plusieurs puis fusionner avec la branch master .","title":"2. Premier pas"},{"location":"02_Git/git1/#3-page-web","text":"Cr\u00e9ation d'un page web index.html <!DOCTYPE html> < html > < head > < meta charset = \"utf-8\" /> < title > Tutoriel Git </ title > </ head > < body > < h1 > Hello world </ h1 > </ body > </ html > On affiche le status $ git status On branch master No commits yet Untracked files: (use \"git add <file>...\" to include in what will be committed) index.html Cela nous indique q'un fichier n'est pas suivi. On n'a pas encore indiqu\u00e9 qu'il fallait suivre ce fichier. $ git add . Le point . permet de tout ajouter pour le suivi. $ git commit -m \"Initial commit\" [master (root-commit) 26ee28b] Initial commit 1 file changed, 11 insertions(+) create mode 100644 index.html Le suivi est effectu\u00e9 $ git status On branch master nothing to commit, working tree clean Tout se passe bien.","title":"3. Page web"},{"location":"02_Git/git1/#4-modification-de-la-page-web-et-des-commit","text":"Ajout d'un paragraphe < p > Tutoriel sur Git </ p > $ git status On branch master Changes not staged for commit: (use \"git add <file>...\" to update what will be committed) (use \"git restore <file>...\" to discard changes in working directory) modified: index.html Git nous indique qu'il y a eu des changements sur le fichier suivi. Alors ... $ git add . $ git commit -m \"Ajout d'un paragraphe\" [master 7c7b826] Ajout d'un paragraphe 1 file changed, 1 insertion(+), 1 deletion(-) une nouvelle photo de notre travail","title":"4. Modification de la page web et des commit"},{"location":"02_Git/git1/#5-un-historique-des-commit","text":"$ git log commit 7c7b826effd3a7989fcba8e339dc6e5e4384d3d0 (HEAD -> master) Author: Charles Yo <charles.endymion@gmail.com> Date: Tue Sep 13 11:41:01 2022 +0200 Ajout d'un paragraphe commit 26ee28ba8a62f8bd59e620dc34bfdbfc90bbb434 Author: Charles Yo <charles.endymion@gmail.com> Date: Tue Sep 13 11:00:18 2022 +0200 Initial commit Cette commande git log permet de voir tous les commit . - Auteur; - date; - message.","title":"5. Un historique des commit"},{"location":"02_Git/git1/#b-git-branches","text":"","title":"B. Git  Branches"},{"location":"02_Git/git1/#1-les-branches","text":"$ git status On branch master nothing to commit, working tree clean ou $ git branch * master Cela nous indique que nous sommes sur la branch master . Le sch\u00e9ma ci-dessous montre en bleu les diff\u00e9rents commit . On souhaite parfois faire des modifications, d\u00e9velopper d'autres fonctionalit\u00e9s. Pour cela on cr\u00e9e une branche en orange puis on fusionne avec la branche master si on le souhaite.","title":"1. Les branches"},{"location":"02_Git/git1/#2-creation-dune-branche","text":"Cr\u00e9ation d'une branche nommer Hello avec git branch 5 $ git branch Hello $ git branch Hello * master On a donc deux branches : Hello et master. Je suis actuellement sur la branche master indiqu\u00e9 par *. Autre solution $ git checkout -b Bye Switched to a new branch 'Bye' $ git branch * Bye Hello master Nous avons cr\u00e9\u00e9 une nouvelle branche et nous sommes actuellement sur la branche Bye indiqu\u00e9 par *. Aller sur une autre branche $ git checkout master Switched to branch 'master' $ git branch Bye Hello * master","title":"2. Cr\u00e9ation d'une branche"},{"location":"02_Git/git1/#3-travailler-sur-une-branche","text":"On va travailler sur la branche Hello $ git checkout Hello On effectue quelques modifications sur notre fichier index.html. <!DOCTYPE html> < html > < head > < meta charset = \"utf-8\" /> < title > Tutoriel Git </ title > < style > body { background-color : skyblue ;} h1 , p { color : #ffffff ;} </ style > </ head > < body > < h1 > Hello world </ h1 > < p > Tutoriel sur Git </ p > < p > Ceci est une modifiation ! </ p > </ body > </ html > On obtient : Un suivi et une photo de notre travail $ git add . $ git commit -m \"Ajout de couleur et texte\" [Hello 7d35a64] Ajout de couleur et texte 1 file changed, 5 insertions(+)) une nouvelle photo de notre travail mais dans la branche Hello Sur n'importe quelle branche Hello ou master notre travail est suivi.","title":"3. Travailler sur une branche"},{"location":"02_Git/git1/#4-retour-sur-la-branche-master","text":"$ git checkout master Switched to branch 'master' J'actualise mon site. Les modifications ont disparues. Bascule sur la branche sp\u00e9cifi\u00e9e et met \u00e0 jour le r\u00e9pertoire de travail avec git merge 6 Il faut donc tirer nos modifications de la branche Hello vers la branche master $ git merge Hello Updating 7c7b826..7d35a64 Fast-forward index.html | 5 +++++ 1 file changed, 5 insertions(+) On retourne sur le site et Sur la branche master et Hello on a le m\u00eame code.","title":"4. Retour sur la branche master"},{"location":"02_Git/git1/#c-git-partie-push-and-pull","text":"Pour l'instant on travaille en local. Sans avoir besoin d'internet. Mais on souhaite travaille avec des collaborateurs dans un m\u00eame projet. Il faut que le code soit en ligne dans un repository (d\u00e9pot) en ligne. Listing des clients Git - Github (Github desktop pas de console) - GitLab - Bitbucket","title":"C. Git partie Push and Pull"},{"location":"02_Git/git1/#1-utilisation-de-github","text":"Cr\u00e9ation d'un compte Cr\u00e9ation d'un projet Puis Soit on cr\u00e9e un nouveau repository \u2026or create a new repository on the command line echo \"# tuto-git\" >> README.md git init git add README.md git commit -m \"first commit\" git branch -M main git remote add origin https://github.com/Charles-depot/tuto-git.git git push -u origin main Soit on pousse un dossier qui existe d\u00e9j\u00e0 en local \u2026or push an existing repository from the command line git remote add origin https://github.com/Charles-depot/tuto-git.git git branch -M main git push -u origin main On va utiliser la deuxi\u00e8me solution car on a notre fichier index.html cr\u00e9\u00e9 Dans un terminal et dans le bon dossier. On va initialiser ce repository $ git remote add origin https://github.com/Charles-depot/tuto-git.git On va pousser notre code dans le repository. Attention la branche c'est master !!! git push -u origin master Enumerating objects: 9, done. Counting objects: 100% (9/9), done. Delta compression using up to 4 threads Compressing objects: 100% (6/6), done. Writing objects: 100% (9/9), 926 bytes | 13.00 KiB/s, done. Total 9 (delta 2), reused 0 (delta 0), pack-reused 0 remote: Resolving deltas: 100% (2/2), done. To https://github.com/Charles-depot/tuto-git.git * [new branch] master -> master Branch 'master' set up to track remote branch 'master' from 'origin'. Le code est maintenant accessible en ligne en actualisant la page. On peut le regarder en ligne et il est accessible \u00e0 tout le monde. Il existe de nombreux repository sur GitHub que l'on peut cloner en local. Petite modification en locale du fichier index.html par p> Ceci est une modifiation et un autre ! </ p > Dans le terminal $ git status On branch master Your branch is up to date with 'origin/master'. Changes not staged for commit: (use \"git add <file>...\" to update what will be committed) (use \"git restore <file>...\" to discard changes in working directory) modified: index.html no changes added to commit (use \"git add\" and/or \"git commit -a\") $ git add . $ git commit -m \"Modification du paragraphe\" [master 723d493] Modification du paragraphe 1 file changed, 1 insertion(+), 1 deletion(-) git $ git push origin master Enumerating objects: 5, done. Counting objects: 100% (5/5), done. Delta compression using up to 4 threads Compressing objects: 100% (2/2), done. Writing objects: 100% (3/3), 311 bytes | 44.00 KiB/s, done. Total 3 (delta 1), reused 0 (delta 0), pack-reused 0 remote: Resolving deltas: 100% (1/1), completed with 1 local object. To https://github.com/Charles-depot/tuto-git.git 7d35a64..723d493 master -> master Et sur le repository en actualisant.","title":"1. Utilisation de GitHub"},{"location":"02_Git/git1/#2-travail-avec-un-collaborateur","text":"Pour la mise \u00e0 jour d'un dossier sur lequel il y a eu des changements. $ git pull origin master Compl\u00e9ment d'information Pas trouv\u00e9. \u21a9 Compl\u00e9ment d'information https://git-scm.com/docs/git-config \u21a9 Compl\u00e9ment d'information Pas trouv\u00e9. \u21a9 Compl\u00e9ment d'information https://git-scm.com/docs/git-init \u21a9 Compl\u00e9ment d'information https://git-scm.com/docs/git-branch \u21a9 Compl\u00e9ment d'information https://git-scm.com/docs/git-merge \u21a9","title":"2. Travail avec un collaborateur"},{"location":"02_Git/git2/","text":"A. Introduction Git Github B. Branches C. Forks and Pull Requests D. Issues E. Cloner un d\u00e9pot et Push-Pull Partie 1 Partie 2 F. Git init and git add 1. Cr\u00e9ation d'un dossier local test_depot 2. Ajouter un nouveau fichier 3. Mettre tout dans un d\u00e9pot 4. Changement dans GitHub Ce document est con\u00e7u pour vous apprendre les bases du travail avec le contr\u00f4le de version git et le site Web GitHub. Objectifs d'apprentissage: Comprendre le concept de contr\u00f4le de version. Comprendre la diff\u00e9rence entre le logiciel git et le site Web GitHub. Comprendre la terminologie : branche, fourche, fusion, pull, push, distant Effectuez votre premi\u00e8re demande d'extraction vers un r\u00e9f\u00e9rentiel git sur GitHub. Il s'inspire des vid\u00e9os suivantes Ressource pour ce document La Tech avec Bertrand Quelques vid\u00e9os pour comprendre les concepts D\u00e9mystifions Git, Github, Gitlab (1/3) : Notion d\u2019historique D\u00e9mystifions Git, Github, Gitlab (2/3) : Travailler \u00e0 plusieurs D\u00e9mystifions Git, Github, Gitlab (3/3) : L\u2019\u00e9cosyst\u00e8me Git A. Introduction Git Github \u2693\ufe0e Pourquoi Git et GitHub ? La gestion de versions (en anglais : version control ou revision control) consiste \u00e0 g\u00e9rer l'ensemble des versions d'un ou plusieurs fichiers (g\u00e9n\u00e9ralement en texte). Collaboration Git est un logiciel de controle de version GitHub est un service web Premi\u00e8re activit\u00e9 rapide Repository Cr\u00e9er un compte sur Github Cr\u00e9er un d\u00e9pot (repository) nomm\u00e9 rainbow Cr\u00e9er un nouveau fichier nommer poemes.txt Commit new file Commit directly to the main branch Le poeme est dans le d\u00e9pot Commmit change Cliquer sur poeme.txt Il manque la couleur verte. Cliquer sur le crayon --> Edit this file Remplir en bas Commit change par \"j'ai ajout\u00e9 la couleur verte\" puis cliquer sur Commit changes Il manque la couleur jaune. Cliquer sur le crayon --> Edit this file Remplir en bas Commit change par \"j'ai ajout\u00e9 la couleur jaune\" puis cliquer sur Commit changes History Cliquer sur History pour voir l'historique. En cliquant sur un des commit, on peut voir ce qui a \u00e9t\u00e9 modifi\u00e9 (soulign\u00e9, biffer) On voit aussi commit d8f911b0c32226239ff7bb95e40306014b6386be\" commit hash meaning La suite de caract\u00e8res d8f911b0c32226239ff7bb95e40306014b6386be est l'identifiant unique du commit On le voit aussi dans l'URL https://github.com/Charles-depot/rainbow/commit/d8f911b0c32226239ff7bb95e40306014b6386be Bilan : Cr\u00e9ation d'un d\u00e9pot. Plusieurs commit Historique B. Branches \u2693\ufe0e Nous avons effectu\u00e9 des commit de fa\u00e7on lin\u00e9aire en apportant des modifications. Chaque commit poss\u00e8de un identifiant unique. C'est la branche master ou main . C'est la racine de notre arbre. Je souhaite maintenant faire des modifications mais je ne sais pas si je vais les garder. Je souhaite faire une exp\u00e9rience sur mon po\u00e8me qui va parler de licornes. Je souhaite bifurquer ( branch ) \u00e0 partir d'un commit en cr\u00e9ant une nouvelle branche. On peut toujours continuer \u00e0 travailler sur la branche master. On peut aussi faire des commit sur la nouvelle branche. On peut faire aussi une autre branche nomm\u00e9e f\u00e9es \u00e0 partir d'un autre commit. Etc... Et comment peut-on fusionner ( merge ) tout ce travail ? Cr\u00e9er la nouvelle branche licorne V\u00e9rifier que vous \u00eates bien sur la branche licorne Modifier le po\u00e8me en ajoutant des mots. Ensuite on a le choix : Commit directly to the licorne branch Create a new branch for this commit and start a pull request On choisit Commit directly to the licorne branch . Et on sauvegarde. Si on switch sur la branche main , on voit l'ancienne version du po\u00e8me. On aurait pu faire un commit \u00e0 partir de la branche main mais on a choisit de faire un chemin diff\u00e9rent. On a deux chemins maintenant que l'on peut travailler s\u00e9par\u00e9ment. Maintenant si je trouve que le chemin licorne est valable et je souhaite que ce travail aille dans la branche main Revenir dans le d\u00e9pot rainbow puis Insights puis Network. Cela permet de visualiser les diff\u00e9rents branches. push : pousser (envoyer) quelque chose \u00e0 quelqu'un pull : tirer quelque chose \u00e0 quelqu'un pull request : prendre les changements et les tirer vers la branche master retourner sur la branche main pour voir : Cliquer sur le bouton : Compare & pull request . Je suis en train de faire un pull request c'est \u00e0 dire une requ\u00e8te pour fusionner les changements faits de licorne \u00e0 main . On peut voir les changements en bas de page. Cliquer sur le bouton create pull request Cliquer sur le bouton Merge pull request pour finaliser. Puis Confirm merge Revenir dans le d\u00e9pot rainbow puis Insights puis Network . Cela permet de visualiser ce qui s'est pass\u00e9. On peut voir que la branche licorne a fusionn\u00e9 avec la branche main . Cr\u00e9er une nouvelle branche poneys \u00e0 partir de main . Modifier le po\u00e8me. Faire un commit Revenir \u00e0 la branche main Modifier le po\u00e8me. Faire un commit Revenir dans le d\u00e9pot rainbow puis Insights puis Network . On peut voir les diff\u00e9rents actions. Commnent fusionner le tout ? Branche main Cliquer sur le bouton : Compare & pull request Cliquer sur le bouton Merge pull request pour finaliser. Puis Confirm merge Revenir dans le d\u00e9pot rainbow puis Insights puis Network . On peut voir le r\u00e9sultat. C. Forks and Pull Requests \u2693\ufe0e Nous allons voir comment contribuer/collaborer avec une autre personne dans le d\u00e9pot. Deux concepts \u00e0 ajouter. Fork une instance compl\u00e9te de mon d\u00e9pot sur un autre compte On aura une exacte r\u00e9plication du d\u00e9pot avec les commit et les branches. On peut travailler sur le fork (commit, branches) sans modifier le d\u00e9pot original. Pull request Cela signifie que par exemple si une branche de mon travail sur le fork est superbe et que je souhaite contribuer dans le d\u00e9pot original. Je vais envoyer ce travail dans le d\u00e9pot original. Et c'est au d\u00e9pot original d'accepter ou rejeter d'o\u00f9 le pull request. charlestuteur est au autre compte. - Aller sur charlestuteur , chercher le d\u00e9pot charles-depot puis fork . - On peut le voir sur ce compte d'o\u00f9 provient le fork : Modifier le poeme Faire un commit en choisissant Create a new branch for this commit and start a pull request. On peut aussi faire juste un commit Ensuite faire un pull request pour ajouter \u00e0 la brancher master du fork Verifier sur Insights/Network Cr\u00e9er un pull request vers charles-depot. Et attendre la r\u00e9ponse. Aller sur charles-depot et cliquer sur Pull requests En cliquant sur la demande on peut voir les changements Remplir le commentaire Cliquer sur Merge pull requests Aller sur charlestuteur pour voir la p\u00e9ponse. D. Issues \u2693\ufe0e Vous pouvez utiliser GitHub Issues pour planifier, suivre les id\u00e9es, les commentaires, les t\u00e2ches ou les bogues. En un mot suivre votre travail. - Cliquer sur New Issue pour cr\u00e9er un nouveau probl\u00e8me. Remplir les informations Donner \u00e0 votre probl\u00e8me un titre descriptif. Le titre doit indiquer en un coup d'\u0153il de quoi il s'agit. Ajoutez une description qui explique le but du probl\u00e8me, y compris tous les d\u00e9tails qui pourraient aider \u00e0 r\u00e9soudre le probl\u00e8me. Vous pouvez utiliser Markdown pour ajouter une mise en forme, des liens, des emojis, etc. Pour plus d'informations, consultez \u00c9crire sur GitHub Ajouter une liste de t\u00e2ches. [] #50 [] faire les modifications Ajouter des \u00e9tiquettes (labels)** Ajouter une \u00e9tiquette pour cat\u00e9goriser votre probl\u00e8me. GitHub fournit des \u00e9tiquettes par d\u00e9faut. Vous pouvez utiliser ces libell\u00e9s par d\u00e9faut ou cr\u00e9er les votres. Cliquer sur issues puis Labels puis New label . Donner un nom, une description et une couleur. Etiquettes Associer les issues au commit ou au pull request ? Cr\u00e9er un commit et associer dans le titre le num\u00e9ro de l'issue comme ... per #8 On cr\u00e9e un commit particulier \u00e0 cette issue. En revenant sur les issues : Charles-depot added a commit that referenced this issue 1 minute ago On peut cliquer sur commit li\u00e9 per #8 pour suivre les changements. Clore l'issue si besoin ou directement dans le commit en \u00e9crivant dans le titre fixes #8 On peut faire une issue \u00e0 partir d'un commit. commit 21f9ba806f57fd947586de3517a469fe41af2157 Bilan R\u00e9f\u00e9rence au num\u00e9ro de l'issue R\u00e9f\u00e9rence \u00e0 l'identifiant d'un commit ou description de l'issue. E. Cloner un d\u00e9pot et Push-Pull \u2693\ufe0e Pour l'instant nous avons travaill\u00e9 directement sur Github website. Nous allons travaill\u00e9 maintenant sur l'ordinateur. Il faut installer Git sur l'ordinateur Une alternative est d'utiliser un client comme GitHub Desktop Client git : https://desktop.github.com/ aide : https://docs.github.com/en/desktop Partie 1 \u2693\ufe0e V\u00e9rifier que l'installation a bien fonctionn\u00e9 en ouvrant un cmd. Taper git. On obtient une aide. Faire un d\u00e9pot Git local. Il faut un dossier dans l'ordinateur qui soit un d\u00e9pot Git. On va saisir le d\u00e9pot sur GitHub et le mettre en local. Cr\u00e9er un nouveau d\u00e9pot : rainbow-song avec un readme.md On peut ensuite voir : C'est une URL sp\u00e9cial qui correspond \u00e0 ce d\u00e9pot. N\u00e9c\u00e9ssaire pour cloner le d\u00e9pot cr\u00e9\u00e9 sur un ordinateur local. https://github.com/Charles-depot/Rainbow-song.git NB : Git associe une URL distante \u00e0 un nom, et votre d\u00e9pot par d\u00e9faut est g\u00e9n\u00e9ralement appel\u00e9e origin. https://docs.github.com/en/get-started/getting-started-with-git/about-remote-repositories Partie 2 \u2693\ufe0e Dans le dossier local Soit cmd ou clique droit Git Bash Here git clone https://github.com/Charles-depot/Rainbow-song.git On obtient : Dans le dossier local : Vous pouvez ouvrir le fichier README.md local pour voir qu'il correspond \u00e0 celui de GitHub. Et le modifier. Le sauvegarder. git status Ce n'est donc pas le d\u00e9pot Git. Je ne suis pas dans le bon dossier. On voit que l'on est dans la branch master . On peut voir qu'un fichier a \u00e9t\u00e9 modifi\u00e9. Pour l'instant, le fichier est modifi\u00e9 localement. $ git commit -a -m \"Ajout de la cle C\" -a tous les fichiers -m commentaire On obtient : git config --list Cela permet d'avoir des renseignements sur la configuration locale. Il y a probl\u00e8me avec le user.name . Il faut le modifier. Et prendre le user.name du d\u00e9pot GitHub. git config global user.name = \"Charles-depot\" Cependant rien n'a chang\u00e9 dans le GitHub. git remote >> origin $ git remote -v origin https://github.com/Charles-depot/Rainbow-song.git (fetch) origin https://github.com/Charles-depot/Rainbow-song.git (push) donc inf git push origin master Cela ne fonction pas. git push origin main main est nom de la branche dans le d\u00e9pot. On obtient : On peut voir le changementsur le d\u00e9pot GitHub. F. Git init and git add \u2693\ufe0e Dans les parties pr\u00e9c\u00e9dentes, nous avons cr\u00e9\u00e9 un d\u00e9pot puis on l'a mis dans l'ordinateur. Nous allons lier un dossier local \u00e0 un d\u00e9pot Git 1. Cr\u00e9ation d'un dossier local test_depot \u2693\ufe0e un fichier dance.md Dans ce dossier: $ git status fatal: not a git repository (or any of the parent directories): .git Nous allons en faire un d\u00e9pot git. $ git init Initialized empty Git repository in E:/Git Mkdocs Markdown/Test_depot/.git/ $ git status On branch master No commits yet Untracked files: (use \"git add <file>...\" to include in what will be committed) dance.md nothing added to commit but untracked files present (use \"git add\" to track) 2. Ajouter un nouveau fichier \u2693\ufe0e Cr\u00e9ation de dance-2.md $ git status On branch master No commits yet Untracked files: (use \"git add <file>...\" to include in what will be committed) dance-2.md dance.md nothing added to commit but untracked files present (use \"git add\" to track) On ajoute le suivi sur le fichier dance.md $ git add dance.md $ git status On branch master No commits yet Changes to be committed: (use \"git rm --cached <file>...\" to unstage) new file: dance.md Untracked files: (use \"git add <file>...\" to include in what will be committed) dance-2.md On peut lire qu'il y a un fichier suivi dance.md et un fichier non suivi dance-2.md Un petit commit $ git commit -m \"Ajout d'une danse\" [master (root-commit) 1c0d430] Ajout d'une danse 1 file changed, 3 insertions(+) create mode 100644 dance.md $ git status On branch master Untracked files: (use \"git add <file>...\" to include in what will be committed) dance-2.md nothing added to commit but untracked files present (use \"git add\" to track) Si on souhaite tout suivre, on utilise la commande git add . $ git add . $ git commit -m \"Ajout de la deuxi\u00e8me dance\" [master 8953913] Ajout de la deuxi\u00e8me dance 1 file changed, 3 insertions(+) create mode 100644 dance-2.md $ git status On branch master nothing to commit, working tree clean 3. Mettre tout dans un d\u00e9pot \u2693\ufe0e $ git push master fatal: The current branch master has no upstream branch. To push the current branch and set the remote as upstream, use git push --set-upstream master master $ git remote -v Le d\u00e9pot Git vide existe mais il n'y a pas d'association avec le dossier local. On peut voir la ligne https://github.com/Charles-depot/test_depot.git permettant d'associer le d\u00e9pot distant avec le dossier local $ git remote add origin https://github.com/Charles-depot/test_depot.git $ git remote origin $ git remote -v origin https://github.com/Charles-depot/test_depot.git (fetch) origin https://github.com/Charles-depot/test_depot.git (push) Le d\u00e9pot distant se nomme origin $ git push origin master Enumerating objects: 5, done. Counting objects: 100% (5/5), done. Delta compression using up to 4 threads Compressing objects: 100% (3/3), done. Writing objects: 100% (5/5), 496 bytes | 248.00 KiB/s, done. Total 5 (delta 0), reused 0 (delta 0), pack-reused 0 To https://github.com/Charles-depot/test_depot.git * [new branch] master -> master Si on regarde maintenant dans le d\u00e9pot distant. On retrouve nos deux fichiers. 4. Changement dans GitHub \u2693\ufe0e Modification du fichier dance.md dans GitHub Un petit commit Que s'est-il pass\u00e9 en local ? $ git status On branch master nothing to commit, working tree clean Rien La solution avec un git pull . $ git pull origin master remote: Enumerating objects: 5, done. remote: Counting objects: 100% (5/5), done. remote: Compressing objects: 100% (3/3), done. remote: Total 3 (delta 0), reused 0 (delta 0), pack-reused 0 Unpacking objects: 100% (3/3), 699 bytes | 2.00 KiB/s, done. From https://github.com/Charles-depot/test_depot * branch master -> FETCH_HEAD 8953913..41b7811 master -> origin/master Updating 8953913..41b7811 Fast-forward dance.md | 1 + 1 file changed, 1 insertion(+) On ouvre le fichier en local.","title":"Introduction Git / Github"},{"location":"02_Git/git2/#a-introduction-git-github","text":"Pourquoi Git et GitHub ? La gestion de versions (en anglais : version control ou revision control) consiste \u00e0 g\u00e9rer l'ensemble des versions d'un ou plusieurs fichiers (g\u00e9n\u00e9ralement en texte). Collaboration Git est un logiciel de controle de version GitHub est un service web Premi\u00e8re activit\u00e9 rapide Repository Cr\u00e9er un compte sur Github Cr\u00e9er un d\u00e9pot (repository) nomm\u00e9 rainbow Cr\u00e9er un nouveau fichier nommer poemes.txt Commit new file Commit directly to the main branch Le poeme est dans le d\u00e9pot Commmit change Cliquer sur poeme.txt Il manque la couleur verte. Cliquer sur le crayon --> Edit this file Remplir en bas Commit change par \"j'ai ajout\u00e9 la couleur verte\" puis cliquer sur Commit changes Il manque la couleur jaune. Cliquer sur le crayon --> Edit this file Remplir en bas Commit change par \"j'ai ajout\u00e9 la couleur jaune\" puis cliquer sur Commit changes History Cliquer sur History pour voir l'historique. En cliquant sur un des commit, on peut voir ce qui a \u00e9t\u00e9 modifi\u00e9 (soulign\u00e9, biffer) On voit aussi commit d8f911b0c32226239ff7bb95e40306014b6386be\" commit hash meaning La suite de caract\u00e8res d8f911b0c32226239ff7bb95e40306014b6386be est l'identifiant unique du commit On le voit aussi dans l'URL https://github.com/Charles-depot/rainbow/commit/d8f911b0c32226239ff7bb95e40306014b6386be Bilan : Cr\u00e9ation d'un d\u00e9pot. Plusieurs commit Historique","title":"A. Introduction Git Github"},{"location":"02_Git/git2/#b-branches","text":"Nous avons effectu\u00e9 des commit de fa\u00e7on lin\u00e9aire en apportant des modifications. Chaque commit poss\u00e8de un identifiant unique. C'est la branche master ou main . C'est la racine de notre arbre. Je souhaite maintenant faire des modifications mais je ne sais pas si je vais les garder. Je souhaite faire une exp\u00e9rience sur mon po\u00e8me qui va parler de licornes. Je souhaite bifurquer ( branch ) \u00e0 partir d'un commit en cr\u00e9ant une nouvelle branche. On peut toujours continuer \u00e0 travailler sur la branche master. On peut aussi faire des commit sur la nouvelle branche. On peut faire aussi une autre branche nomm\u00e9e f\u00e9es \u00e0 partir d'un autre commit. Etc... Et comment peut-on fusionner ( merge ) tout ce travail ? Cr\u00e9er la nouvelle branche licorne V\u00e9rifier que vous \u00eates bien sur la branche licorne Modifier le po\u00e8me en ajoutant des mots. Ensuite on a le choix : Commit directly to the licorne branch Create a new branch for this commit and start a pull request On choisit Commit directly to the licorne branch . Et on sauvegarde. Si on switch sur la branche main , on voit l'ancienne version du po\u00e8me. On aurait pu faire un commit \u00e0 partir de la branche main mais on a choisit de faire un chemin diff\u00e9rent. On a deux chemins maintenant que l'on peut travailler s\u00e9par\u00e9ment. Maintenant si je trouve que le chemin licorne est valable et je souhaite que ce travail aille dans la branche main Revenir dans le d\u00e9pot rainbow puis Insights puis Network. Cela permet de visualiser les diff\u00e9rents branches. push : pousser (envoyer) quelque chose \u00e0 quelqu'un pull : tirer quelque chose \u00e0 quelqu'un pull request : prendre les changements et les tirer vers la branche master retourner sur la branche main pour voir : Cliquer sur le bouton : Compare & pull request . Je suis en train de faire un pull request c'est \u00e0 dire une requ\u00e8te pour fusionner les changements faits de licorne \u00e0 main . On peut voir les changements en bas de page. Cliquer sur le bouton create pull request Cliquer sur le bouton Merge pull request pour finaliser. Puis Confirm merge Revenir dans le d\u00e9pot rainbow puis Insights puis Network . Cela permet de visualiser ce qui s'est pass\u00e9. On peut voir que la branche licorne a fusionn\u00e9 avec la branche main . Cr\u00e9er une nouvelle branche poneys \u00e0 partir de main . Modifier le po\u00e8me. Faire un commit Revenir \u00e0 la branche main Modifier le po\u00e8me. Faire un commit Revenir dans le d\u00e9pot rainbow puis Insights puis Network . On peut voir les diff\u00e9rents actions. Commnent fusionner le tout ? Branche main Cliquer sur le bouton : Compare & pull request Cliquer sur le bouton Merge pull request pour finaliser. Puis Confirm merge Revenir dans le d\u00e9pot rainbow puis Insights puis Network . On peut voir le r\u00e9sultat.","title":"B. Branches"},{"location":"02_Git/git2/#c-forks-and-pull-requests","text":"Nous allons voir comment contribuer/collaborer avec une autre personne dans le d\u00e9pot. Deux concepts \u00e0 ajouter. Fork une instance compl\u00e9te de mon d\u00e9pot sur un autre compte On aura une exacte r\u00e9plication du d\u00e9pot avec les commit et les branches. On peut travailler sur le fork (commit, branches) sans modifier le d\u00e9pot original. Pull request Cela signifie que par exemple si une branche de mon travail sur le fork est superbe et que je souhaite contribuer dans le d\u00e9pot original. Je vais envoyer ce travail dans le d\u00e9pot original. Et c'est au d\u00e9pot original d'accepter ou rejeter d'o\u00f9 le pull request. charlestuteur est au autre compte. - Aller sur charlestuteur , chercher le d\u00e9pot charles-depot puis fork . - On peut le voir sur ce compte d'o\u00f9 provient le fork : Modifier le poeme Faire un commit en choisissant Create a new branch for this commit and start a pull request. On peut aussi faire juste un commit Ensuite faire un pull request pour ajouter \u00e0 la brancher master du fork Verifier sur Insights/Network Cr\u00e9er un pull request vers charles-depot. Et attendre la r\u00e9ponse. Aller sur charles-depot et cliquer sur Pull requests En cliquant sur la demande on peut voir les changements Remplir le commentaire Cliquer sur Merge pull requests Aller sur charlestuteur pour voir la p\u00e9ponse.","title":"C. Forks and Pull Requests"},{"location":"02_Git/git2/#d-issues","text":"Vous pouvez utiliser GitHub Issues pour planifier, suivre les id\u00e9es, les commentaires, les t\u00e2ches ou les bogues. En un mot suivre votre travail. - Cliquer sur New Issue pour cr\u00e9er un nouveau probl\u00e8me. Remplir les informations Donner \u00e0 votre probl\u00e8me un titre descriptif. Le titre doit indiquer en un coup d'\u0153il de quoi il s'agit. Ajoutez une description qui explique le but du probl\u00e8me, y compris tous les d\u00e9tails qui pourraient aider \u00e0 r\u00e9soudre le probl\u00e8me. Vous pouvez utiliser Markdown pour ajouter une mise en forme, des liens, des emojis, etc. Pour plus d'informations, consultez \u00c9crire sur GitHub Ajouter une liste de t\u00e2ches. [] #50 [] faire les modifications Ajouter des \u00e9tiquettes (labels)** Ajouter une \u00e9tiquette pour cat\u00e9goriser votre probl\u00e8me. GitHub fournit des \u00e9tiquettes par d\u00e9faut. Vous pouvez utiliser ces libell\u00e9s par d\u00e9faut ou cr\u00e9er les votres. Cliquer sur issues puis Labels puis New label . Donner un nom, une description et une couleur. Etiquettes Associer les issues au commit ou au pull request ? Cr\u00e9er un commit et associer dans le titre le num\u00e9ro de l'issue comme ... per #8 On cr\u00e9e un commit particulier \u00e0 cette issue. En revenant sur les issues : Charles-depot added a commit that referenced this issue 1 minute ago On peut cliquer sur commit li\u00e9 per #8 pour suivre les changements. Clore l'issue si besoin ou directement dans le commit en \u00e9crivant dans le titre fixes #8 On peut faire une issue \u00e0 partir d'un commit. commit 21f9ba806f57fd947586de3517a469fe41af2157 Bilan R\u00e9f\u00e9rence au num\u00e9ro de l'issue R\u00e9f\u00e9rence \u00e0 l'identifiant d'un commit ou description de l'issue.","title":"D. Issues"},{"location":"02_Git/git2/#e-cloner-un-depot-et-push-pull","text":"Pour l'instant nous avons travaill\u00e9 directement sur Github website. Nous allons travaill\u00e9 maintenant sur l'ordinateur. Il faut installer Git sur l'ordinateur Une alternative est d'utiliser un client comme GitHub Desktop Client git : https://desktop.github.com/ aide : https://docs.github.com/en/desktop","title":"E. Cloner un d\u00e9pot et Push-Pull"},{"location":"02_Git/git2/#partie-1","text":"V\u00e9rifier que l'installation a bien fonctionn\u00e9 en ouvrant un cmd. Taper git. On obtient une aide. Faire un d\u00e9pot Git local. Il faut un dossier dans l'ordinateur qui soit un d\u00e9pot Git. On va saisir le d\u00e9pot sur GitHub et le mettre en local. Cr\u00e9er un nouveau d\u00e9pot : rainbow-song avec un readme.md On peut ensuite voir : C'est une URL sp\u00e9cial qui correspond \u00e0 ce d\u00e9pot. N\u00e9c\u00e9ssaire pour cloner le d\u00e9pot cr\u00e9\u00e9 sur un ordinateur local. https://github.com/Charles-depot/Rainbow-song.git NB : Git associe une URL distante \u00e0 un nom, et votre d\u00e9pot par d\u00e9faut est g\u00e9n\u00e9ralement appel\u00e9e origin. https://docs.github.com/en/get-started/getting-started-with-git/about-remote-repositories","title":"Partie 1"},{"location":"02_Git/git2/#partie-2","text":"Dans le dossier local Soit cmd ou clique droit Git Bash Here git clone https://github.com/Charles-depot/Rainbow-song.git On obtient : Dans le dossier local : Vous pouvez ouvrir le fichier README.md local pour voir qu'il correspond \u00e0 celui de GitHub. Et le modifier. Le sauvegarder. git status Ce n'est donc pas le d\u00e9pot Git. Je ne suis pas dans le bon dossier. On voit que l'on est dans la branch master . On peut voir qu'un fichier a \u00e9t\u00e9 modifi\u00e9. Pour l'instant, le fichier est modifi\u00e9 localement. $ git commit -a -m \"Ajout de la cle C\" -a tous les fichiers -m commentaire On obtient : git config --list Cela permet d'avoir des renseignements sur la configuration locale. Il y a probl\u00e8me avec le user.name . Il faut le modifier. Et prendre le user.name du d\u00e9pot GitHub. git config global user.name = \"Charles-depot\" Cependant rien n'a chang\u00e9 dans le GitHub. git remote >> origin $ git remote -v origin https://github.com/Charles-depot/Rainbow-song.git (fetch) origin https://github.com/Charles-depot/Rainbow-song.git (push) donc inf git push origin master Cela ne fonction pas. git push origin main main est nom de la branche dans le d\u00e9pot. On obtient : On peut voir le changementsur le d\u00e9pot GitHub.","title":"Partie 2"},{"location":"02_Git/git2/#f-git-init-and-git-add","text":"Dans les parties pr\u00e9c\u00e9dentes, nous avons cr\u00e9\u00e9 un d\u00e9pot puis on l'a mis dans l'ordinateur. Nous allons lier un dossier local \u00e0 un d\u00e9pot Git","title":"F. Git init and git add"},{"location":"02_Git/git2/#1-creation-dun-dossier-local-test_depot","text":"un fichier dance.md Dans ce dossier: $ git status fatal: not a git repository (or any of the parent directories): .git Nous allons en faire un d\u00e9pot git. $ git init Initialized empty Git repository in E:/Git Mkdocs Markdown/Test_depot/.git/ $ git status On branch master No commits yet Untracked files: (use \"git add <file>...\" to include in what will be committed) dance.md nothing added to commit but untracked files present (use \"git add\" to track)","title":"1. Cr\u00e9ation d'un dossier local test_depot"},{"location":"02_Git/git2/#2-ajouter-un-nouveau-fichier","text":"Cr\u00e9ation de dance-2.md $ git status On branch master No commits yet Untracked files: (use \"git add <file>...\" to include in what will be committed) dance-2.md dance.md nothing added to commit but untracked files present (use \"git add\" to track) On ajoute le suivi sur le fichier dance.md $ git add dance.md $ git status On branch master No commits yet Changes to be committed: (use \"git rm --cached <file>...\" to unstage) new file: dance.md Untracked files: (use \"git add <file>...\" to include in what will be committed) dance-2.md On peut lire qu'il y a un fichier suivi dance.md et un fichier non suivi dance-2.md Un petit commit $ git commit -m \"Ajout d'une danse\" [master (root-commit) 1c0d430] Ajout d'une danse 1 file changed, 3 insertions(+) create mode 100644 dance.md $ git status On branch master Untracked files: (use \"git add <file>...\" to include in what will be committed) dance-2.md nothing added to commit but untracked files present (use \"git add\" to track) Si on souhaite tout suivre, on utilise la commande git add . $ git add . $ git commit -m \"Ajout de la deuxi\u00e8me dance\" [master 8953913] Ajout de la deuxi\u00e8me dance 1 file changed, 3 insertions(+) create mode 100644 dance-2.md $ git status On branch master nothing to commit, working tree clean","title":"2. Ajouter un nouveau fichier"},{"location":"02_Git/git2/#3-mettre-tout-dans-un-depot","text":"$ git push master fatal: The current branch master has no upstream branch. To push the current branch and set the remote as upstream, use git push --set-upstream master master $ git remote -v Le d\u00e9pot Git vide existe mais il n'y a pas d'association avec le dossier local. On peut voir la ligne https://github.com/Charles-depot/test_depot.git permettant d'associer le d\u00e9pot distant avec le dossier local $ git remote add origin https://github.com/Charles-depot/test_depot.git $ git remote origin $ git remote -v origin https://github.com/Charles-depot/test_depot.git (fetch) origin https://github.com/Charles-depot/test_depot.git (push) Le d\u00e9pot distant se nomme origin $ git push origin master Enumerating objects: 5, done. Counting objects: 100% (5/5), done. Delta compression using up to 4 threads Compressing objects: 100% (3/3), done. Writing objects: 100% (5/5), 496 bytes | 248.00 KiB/s, done. Total 5 (delta 0), reused 0 (delta 0), pack-reused 0 To https://github.com/Charles-depot/test_depot.git * [new branch] master -> master Si on regarde maintenant dans le d\u00e9pot distant. On retrouve nos deux fichiers.","title":"3. Mettre tout dans un d\u00e9pot"},{"location":"02_Git/git2/#4-changement-dans-github","text":"Modification du fichier dance.md dans GitHub Un petit commit Que s'est-il pass\u00e9 en local ? $ git status On branch master nothing to commit, working tree clean Rien La solution avec un git pull . $ git pull origin master remote: Enumerating objects: 5, done. remote: Counting objects: 100% (5/5), done. remote: Compressing objects: 100% (3/3), done. remote: Total 3 (delta 0), reused 0 (delta 0), pack-reused 0 Unpacking objects: 100% (3/3), 699 bytes | 2.00 KiB/s, done. From https://github.com/Charles-depot/test_depot * branch master -> FETCH_HEAD 8953913..41b7811 master -> origin/master Updating 8953913..41b7811 Fast-forward dance.md | 1 + 1 file changed, 1 insertion(+) On ouvre le fichier en local.","title":"4.  Changement dans GitHub"},{"location":"02_Git/git3/","text":"Diff\u00e9rence entre Git clone et Git fork \u2693\ufe0e Diff\u00e9rence entre Git clone et Git fork A. Quelles sont les principales diff\u00e9rences entre le forking et le clonage ? B. Processus de flux avec fork et clone dans GitHub 1. Cloner un d\u00e9p\u00f4t Git sans fork 2. Cloner un d\u00e9p\u00f4t Git apr\u00e8s un fork Puisque vous devez d'abord forker avant le clonage, bien que le fork ne soit pas une \u00e9tape pr\u00e9alable stricte pour le clonage. Les personnes d'une organisation travaillant sur un d\u00e9pot (r\u00e9f\u00e9rentiel) ne forkent g\u00e9n\u00e9ralement pas le d\u00e9pot. Nous avons cr\u00e9\u00e9 ce didacticiel uniquement pour nous concentrer sur la diff\u00e9rence et vous expliquer clairement ces deux concepts, \u00e0 savoir : Git Cloning et Git Forking. Ce tutoriel vous aidera \u00e0 comprendre : Diff\u00e9rence entre clonage et fork Workflow de fork et de clonage sur GitHub Pourquoi le clonage et le forking sont-ils utilis\u00e9s de mani\u00e8re interchangeable ? A. Quelles sont les principales diff\u00e9rences entre le forking et le clonage ? \u2693\ufe0e Le forking est effectu\u00e9 sur le compte GitHub tandis que le clonage est effectu\u00e9 \u00e0 l'aide de Git . Lorsque vous forker un d\u00e9pot, vous cr\u00e9ez une copie du d\u00e9pot d'origine (r\u00e9f\u00e9rentiel en amont) mais le d\u00e9pot reste sur votre compte GitHub. Alors que, lorsque vous clonez un d\u00e9pot, le d\u00e9pot est copi\u00e9 sur votre machine locale \u00e0 l'aide de Git. Les modifications apport\u00e9es au d\u00e9pot dupliqu\u00e9 peuvent \u00eatre fusionn\u00e9es avec le d\u00e9pot d'origine via une demande pull request . La demande depull request frappe le propri\u00e9taire du d\u00e9pot et indique que \" J'ai apport\u00e9 des modifications, veuillez fusionner ces modifications dans votre r\u00e9f\u00e9rentiel si vous l'aimez\". D'autre part, les modifications effectu\u00e9es sur la machine locale (d\u00e9p\u00f4t clon\u00e9) peuvent \u00eatre pouss\u00e9es directement vers le d\u00e9p\u00f4t amont. Pour cela, l'utilisateur doit avoir l'acc\u00e8s en \u00e9criture au d\u00e9p\u00f4t sinon ce n'est pas possible. Si l'utilisateur n'ont pas un acc\u00e8s en \u00e9criture, la seule fa\u00e7on de passer est par la requ\u00eate fork\u00e9e. Ainsi, dans ce cas, les modifications apport\u00e9es dans le d\u00e9pot clon\u00e9 sont d'abord pouss\u00e9es vers le d\u00e9pot fork\u00e9, puis une demande pull request est cr\u00e9\u00e9e. C'est une meilleure option de forker avant clone si l'utilisateur n'est pas d\u00e9clar\u00e9 comme contributeur et qu'il s'agit d'un r\u00e9f\u00e9rentiel tiers (non de l'organisation). ! Le forking est un concept tandis que le clonage est un processus. Le forking ne contient qu'une copie s\u00e9par\u00e9e du r\u00e9f\u00e9rentiel et aucune commande n'est impliqu\u00e9e. Le clonage se fait via la commande ' git clone ' et c'est un processus de r\u00e9ception de tous les fichiers de code sur la machine locale. B. Processus de flux avec fork et clone dans GitHub \u2693\ufe0e Le processus de fork et de clonage suit g\u00e9n\u00e9ralement la route suivante : 1. Cloner un d\u00e9p\u00f4t Git sans fork \u2693\ufe0e \u00c9tape 1 : Cloner un d\u00e9pot : disposer de la copie exacte des fichiers du projet sur le syst\u00e8me pour effectuer des modifications. Etape 2 : Effectuez les modifications souhait\u00e9es : un contributeur peut appliquer un seul commit ou plusieurs commits au d\u00e9pot. Mais l'essentiel est que tout se passe sur le syst\u00e8me local. \u00c9tape 3 : pousser les modifications une fois les modifications ou les validations effectu\u00e9es, les modifications peuvent maintenant \u00eatre pouss\u00e9es vers le d\u00e9pot en amont. 2. Cloner un d\u00e9p\u00f4t Git apr\u00e8s un fork \u2693\ufe0e Forker un d\u00e9pot est un processus en cinq \u00e9tapes, mais trois \u00e9tapes sont exactement les m\u00eames que le clonage. Seules la premi\u00e8re et la derni\u00e8re \u00e9tape de fork diff\u00e8rent du clonage. \u00c9tape 1 : Forker un d\u00e9pot : 'utilisateur d\u00e9marre \u00e0 partir du d\u00e9pot en amont sur GitHub, mais ce processus commence \u00e0 partir du fork lorsqu'il fork un d\u00e9pot vers son propre compte GitHub. \u00c9tape 2 : Cloner un d\u00e9pot : Identique au clonage. \u00c9tape 3 : Effectuez les modifications souhait\u00e9es : Identique au clonage. \u00c9tape 4 : pousser les changements : Identique au clonage. \u00c9tape 5 : Envoyer les modifications au d\u00e9pot d'origine : Ce processus est appel\u00e9 Pull Request dans Git. \u00c0 cette \u00e9tape, l'utilisateur envoie les modifications au propri\u00e9taire du d\u00e9pot sous la forme d'une demande de fusion des modifications vers le d\u00e9pot central principal.","title":"Diff\u00e9rences clone / fork"},{"location":"02_Git/git3/#difference-entre-git-clone-et-git-fork","text":"Diff\u00e9rence entre Git clone et Git fork A. Quelles sont les principales diff\u00e9rences entre le forking et le clonage ? B. Processus de flux avec fork et clone dans GitHub 1. Cloner un d\u00e9p\u00f4t Git sans fork 2. Cloner un d\u00e9p\u00f4t Git apr\u00e8s un fork Puisque vous devez d'abord forker avant le clonage, bien que le fork ne soit pas une \u00e9tape pr\u00e9alable stricte pour le clonage. Les personnes d'une organisation travaillant sur un d\u00e9pot (r\u00e9f\u00e9rentiel) ne forkent g\u00e9n\u00e9ralement pas le d\u00e9pot. Nous avons cr\u00e9\u00e9 ce didacticiel uniquement pour nous concentrer sur la diff\u00e9rence et vous expliquer clairement ces deux concepts, \u00e0 savoir : Git Cloning et Git Forking. Ce tutoriel vous aidera \u00e0 comprendre : Diff\u00e9rence entre clonage et fork Workflow de fork et de clonage sur GitHub Pourquoi le clonage et le forking sont-ils utilis\u00e9s de mani\u00e8re interchangeable ?","title":"Diff\u00e9rence entre Git clone et Git fork"},{"location":"02_Git/git3/#a-quelles-sont-les-principales-differences-entre-le-forking-et-le-clonage","text":"Le forking est effectu\u00e9 sur le compte GitHub tandis que le clonage est effectu\u00e9 \u00e0 l'aide de Git . Lorsque vous forker un d\u00e9pot, vous cr\u00e9ez une copie du d\u00e9pot d'origine (r\u00e9f\u00e9rentiel en amont) mais le d\u00e9pot reste sur votre compte GitHub. Alors que, lorsque vous clonez un d\u00e9pot, le d\u00e9pot est copi\u00e9 sur votre machine locale \u00e0 l'aide de Git. Les modifications apport\u00e9es au d\u00e9pot dupliqu\u00e9 peuvent \u00eatre fusionn\u00e9es avec le d\u00e9pot d'origine via une demande pull request . La demande depull request frappe le propri\u00e9taire du d\u00e9pot et indique que \" J'ai apport\u00e9 des modifications, veuillez fusionner ces modifications dans votre r\u00e9f\u00e9rentiel si vous l'aimez\". D'autre part, les modifications effectu\u00e9es sur la machine locale (d\u00e9p\u00f4t clon\u00e9) peuvent \u00eatre pouss\u00e9es directement vers le d\u00e9p\u00f4t amont. Pour cela, l'utilisateur doit avoir l'acc\u00e8s en \u00e9criture au d\u00e9p\u00f4t sinon ce n'est pas possible. Si l'utilisateur n'ont pas un acc\u00e8s en \u00e9criture, la seule fa\u00e7on de passer est par la requ\u00eate fork\u00e9e. Ainsi, dans ce cas, les modifications apport\u00e9es dans le d\u00e9pot clon\u00e9 sont d'abord pouss\u00e9es vers le d\u00e9pot fork\u00e9, puis une demande pull request est cr\u00e9\u00e9e. C'est une meilleure option de forker avant clone si l'utilisateur n'est pas d\u00e9clar\u00e9 comme contributeur et qu'il s'agit d'un r\u00e9f\u00e9rentiel tiers (non de l'organisation). ! Le forking est un concept tandis que le clonage est un processus. Le forking ne contient qu'une copie s\u00e9par\u00e9e du r\u00e9f\u00e9rentiel et aucune commande n'est impliqu\u00e9e. Le clonage se fait via la commande ' git clone ' et c'est un processus de r\u00e9ception de tous les fichiers de code sur la machine locale.","title":"A. Quelles sont les principales diff\u00e9rences entre le forking et le clonage ?"},{"location":"02_Git/git3/#b-processus-de-flux-avec-fork-et-clone-dans-github","text":"Le processus de fork et de clonage suit g\u00e9n\u00e9ralement la route suivante :","title":"B. Processus de flux avec fork et clone dans GitHub"},{"location":"02_Git/git3/#1-cloner-un-depot-git-sans-fork","text":"\u00c9tape 1 : Cloner un d\u00e9pot : disposer de la copie exacte des fichiers du projet sur le syst\u00e8me pour effectuer des modifications. Etape 2 : Effectuez les modifications souhait\u00e9es : un contributeur peut appliquer un seul commit ou plusieurs commits au d\u00e9pot. Mais l'essentiel est que tout se passe sur le syst\u00e8me local. \u00c9tape 3 : pousser les modifications une fois les modifications ou les validations effectu\u00e9es, les modifications peuvent maintenant \u00eatre pouss\u00e9es vers le d\u00e9pot en amont.","title":"1. Cloner un d\u00e9p\u00f4t Git sans fork"},{"location":"02_Git/git3/#2-cloner-un-depot-git-apres-un-fork","text":"Forker un d\u00e9pot est un processus en cinq \u00e9tapes, mais trois \u00e9tapes sont exactement les m\u00eames que le clonage. Seules la premi\u00e8re et la derni\u00e8re \u00e9tape de fork diff\u00e8rent du clonage. \u00c9tape 1 : Forker un d\u00e9pot : 'utilisateur d\u00e9marre \u00e0 partir du d\u00e9pot en amont sur GitHub, mais ce processus commence \u00e0 partir du fork lorsqu'il fork un d\u00e9pot vers son propre compte GitHub. \u00c9tape 2 : Cloner un d\u00e9pot : Identique au clonage. \u00c9tape 3 : Effectuez les modifications souhait\u00e9es : Identique au clonage. \u00c9tape 4 : pousser les changements : Identique au clonage. \u00c9tape 5 : Envoyer les modifications au d\u00e9pot d'origine : Ce processus est appel\u00e9 Pull Request dans Git. \u00c0 cette \u00e9tape, l'utilisateur envoie les modifications au propri\u00e9taire du d\u00e9pot sous la forme d'une demande de fusion des modifications vers le d\u00e9pot central principal.","title":"2. Cloner un d\u00e9p\u00f4t Git apr\u00e8s un fork"},{"location":"03_Ressources/","text":"Ressources et tutoriels \u2693\ufe0e La documentation officielle de Material for MkDocs : https://squidfunk.github.io/mkdocs-material/getting-started/ Pour cr\u00e9er et d\u00e9ployer son site : les excellents tutoriels d'Eric Madec : https://ericecmorlaix.github.io/adn-Tutoriel_site_web/PremiersPas/ D\u00e9buter avec MkDocs, de Franck Chambon : https://ens-fr.gitlab.io/mkdocs/ Les tutoriels vid\u00e9os de Fred Leleu : https://www.youtube.com/playlist?list=PL-Q7fIakgvUAcUluPeUMIP1128wWxboJY Pour les utilisateurs (tr\u00e8s) avanc\u00e9s : le site de Vincent Bouillot : https://bouillotvincent.gitlab.io/pyodide-mkdocs/","title":"Ressources et tutoriels"},{"location":"03_Ressources/#ressources-et-tutoriels","text":"La documentation officielle de Material for MkDocs : https://squidfunk.github.io/mkdocs-material/getting-started/ Pour cr\u00e9er et d\u00e9ployer son site : les excellents tutoriels d'Eric Madec : https://ericecmorlaix.github.io/adn-Tutoriel_site_web/PremiersPas/ D\u00e9buter avec MkDocs, de Franck Chambon : https://ens-fr.gitlab.io/mkdocs/ Les tutoriels vid\u00e9os de Fred Leleu : https://www.youtube.com/playlist?list=PL-Q7fIakgvUAcUluPeUMIP1128wWxboJY Pour les utilisateurs (tr\u00e8s) avanc\u00e9s : le site de Vincent Bouillot : https://bouillotvincent.gitlab.io/pyodide-mkdocs/","title":"Ressources et tutoriels"}]}